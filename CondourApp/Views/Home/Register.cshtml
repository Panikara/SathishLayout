@model CondourApp.UserInfo

@{
    ViewBag.Title = "Register";
}

<h2>Register</h2>

@using (Html.BeginForm("Register", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()


    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="card-box">
        <div class="row">
            <div class="col-md-6">

                <div class="form-group">
                    @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="input-container">
                            @*@Html.EditorFor(model => model.UserName,new { htmlAttributes = new { @class = "form-control", required = "required", @onkeypress = "return alphaOnly(event);" } })*@
                            <input type="text" class="form-control" name="UserName" required onkeypress="return alphaOnly(event);" />
                            @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>




                <div class="form-group">
                    @Html.LabelFor(model => model.AadharNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @*@Html.EditorFor(model => model.AadharNumber, new { htmlAttributes = new { @class = "form-control", required = "required", @onkeypress = "return isNumberKey(event)", @maxlength = "12" } })*@
                        <input type="text" class="form-control" name="AadharNumber" required maxlength="12" onkeypress="return isNumberKey(event)" />
                        @Html.ValidationMessageFor(model => model.AadharNumber, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.PrimaryContactNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @*@Html.EditorFor(model => model.PrimaryContactNumber, new { htmlAttributes = new { @class = "form-control", required = "required", @onkeypress = "return isNumberKey(event)", @maxlength = "10" } })*@
                        <input type="text" class="form-control" name="PrimaryContactNumber" required maxlength="10" onkeypress="return isNumberKey(event)" />
                        @Html.ValidationMessageFor(model => model.PrimaryContactNumber, "", new { @class = "text-danger" })
                    </div>
                </div>



                <div class="form-group">
                    @Html.LabelFor(model => model.FatherName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.FatherName, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                        @Html.ValidationMessageFor(model => model.FatherName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Attachments, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @*@Html.EditorFor(model => model.Attachments, new { htmlAttributes = new { @class = "form-control" } })*@
                        <input type="file" name="postedFile" required />
                        @Html.ValidationMessageFor(model => model.Attachments, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col-md-6">

                <div class="form-group">
                    @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2", placeholder = "Password" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", required = "required", @type = "Password" } })
                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.AltContactNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @*@Html.EditorFor(model => model.AltContactNumber, new { htmlAttributes = new { @class = "form-control", required = "required", @onkeypress = "return isNumberKey(event)", @maxlength = "10" } })*@
                        <input type="text" class="form-control" name="AltContactNumber" required maxlength="10" onkeypress="return isNumberKey(event)" />
                        @Html.ValidationMessageFor(model => model.AltContactNumber, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @*@Html.EditorFor(model => model.Gender, new { htmlAttributes = new { @class = "form-control" } })*@
                        <div class="row">
                            <div class="col-md-5">
                                @Html.RadioButtonFor(m => m.Gender, "Male")<span>Male</span>
                            </div>
                            <div class="col-md-5">
                                @Html.RadioButtonFor(m => m.Gender, "Female")<span>FeMale</span>
                            </div>
                        </div>
                        @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <textarea class="form-control" rows="5" id="Address" name="Address"></textarea>
                        @*@Html.TextAreaFor(model => model.Address, 5, 160, new { htmlAttributes = new { @class = "form-control", required = "required" } })*@
                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>


        @{
            Html.RenderPartial("~/Views/PlotDetails_PartialView.cshtml");
        }

        <div class="row" style="">
            <div class="form-group">

                <div class="col-md-offset-4 col-md-4">
                    <input type="submit" value="Submit" class="btn btn-success btn-lg" />
                </div>
            </div>
        </div>

    </div>
  }




<script src="~/scripts/jquery-1.10.2.js"></script>
<script type="text/javascript">
    function alphaOnly(event) {
        var key = event.keyCode;
        return ((key >= 65 && key <= 90) || (key >= 97 && key <= 122) || key == 8);
    };

    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode
        if (charCode > 31 && (charCode < 48 || charCode > 57))
            return false;
        return true;
    }

    $(document).ready(function () {

    });
</script>


